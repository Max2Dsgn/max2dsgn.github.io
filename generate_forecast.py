import os
import json
import datetime
import feedparser
import openai
import tempfile
import shutil

# ==============================
# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# ==============================
openai.api_key = os.getenv("OPENAI_API_KEY")

RSS_FEEDS = [
    "https://techcrunch.com/feed/",
    "https://www.theverge.com/rss/index.xml",
    "https://www.wired.com/feed/rss",
    "https://www.producthunt.com/feed",
    "https://rssexport.rbc.ru/rbcnews/technology/20/full.rss",
    "https://habr.com/ru/rss/all/all/",
]

KEYWORDS = [
    "tech", "technology", "startup", "innovation", "ai", "machine learning",
    "ux", "ui", "product", "design", "digital", "robot", "future", "trend",
    "—Ç–µ—Ö–Ω–æ–ª–æ–≥", "–∏–Ω–Ω–æ–≤–∞—Ü", "—Å—Ç–∞—Ä—Ç–∞–ø", "–¥–∏–∑–∞–π–Ω", "—Ü–∏—Ñ—Ä–æ–≤", "–ø—Ä–æ–¥—É–∫—Ç", "—Ä–æ–±–æ—Ç"
]

DATA_DIR = "data"
HISTORY_PATH = os.path.join(DATA_DIR, "forecasts_history.json")
MAX_HISTORY = 7  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –∑–∞–ø–∏—Å–µ–π


# ==============================
# üß© –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ JSON
# ==============================
def safe_load_json(path):
    try:
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {path}: {e}. –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª.")
        return []


# ==============================
# üíæ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–ø–∏—Å—å JSON
# ==============================
def safe_write_json(path, data):
    os.makedirs(os.path.dirname(path), exist_ok=True)
    with tempfile.NamedTemporaryFile("w", delete=False, dir=os.path.dirname(path), encoding="utf-8") as tmp:
        json.dump(data, tmp, ensure_ascii=False, indent=2)
        tmp.flush()
        os.fsync(tmp.fileno())
    shutil.move(tmp.name, path)


# ==============================
# üì∞ –°–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π
# ==============================
def get_recent_headlines():
    headlines = []
    for url in RSS_FEEDS:
        feed = feedparser.parse(url)
        for entry in feed.entries[:10]:
            title = entry.title
            if any(k.lower() in title.lower() for k in KEYWORDS):
                headlines.append(title)
    return headlines[:20]


# ==============================
# ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞
# ==============================
def generate_forecast(news_headlines):
    if not news_headlines:
        print("‚ö†Ô∏è –ù–µ—Ç —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π, –ø—Ä–æ–≥–Ω–æ–∑ –Ω–µ —Å–æ–∑–¥–∞–Ω.")
        return ""

    joined = "\n".join([f"- {h}" for h in news_headlines])

    prompt = f"""
–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º, –ø—Ä–æ–¥—É–∫—Ç–∞–º –∏ –¥–∏–∑–∞–π–Ω—É.
–ò—Å–ø–æ–ª—å–∑—É—è –Ω–æ–≤–æ—Å—Ç–∏ (–Ω–∏–∂–µ), —Å–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é, –º–µ—Å—è—Ü –∏ –≥–æ–¥:
{joined}

–°–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É–π—Å—è –Ω–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã—Ö —Ç—Ä–µ–Ω–¥–∞—Ö, –≤–ª–∏—è–Ω–∏–∏ –ò–ò, UX/UI-–¥–∏–∑–∞–π–Ω–µ –∏ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö.
–û—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±–µ–∑ –ø–æ–ª–∏—Ç–∏–∫–∏ –∏ –≤–æ–µ–Ω–Ω—ã—Ö —Ç–µ–º.
"""

    try:
        response = openai.responses.create(
            model="gpt-4.1-mini",
            input=prompt,
            max_output_tokens=700,
            temperature=0.7,
        )
        forecast = response.output[0].content[0].text.strip()
        return forecast
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ OpenAI API: {e}")
        return ""


# ==============================
# üöÄ –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
# ==============================
def main():
    os.makedirs(DATA_DIR, exist_ok=True)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã
    history = safe_load_json(HISTORY_PATH)

    # –°–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞
    headlines = get_recent_headlines()
    forecast = generate_forecast(headlines)

    if not forecast.strip():
        print("‚ö†Ô∏è –ü—Ä–æ–≥–Ω–æ–∑ –ø—É—Å—Ç–æ–π, –∑–∞–ø–∏—Å—å –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
        return

    today = datetime.date.today().isoformat()

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –Ω–∞—á–∞–ª–æ
    history.insert(0, {"date": today, "forecast": forecast})
    history = history[:MAX_HISTORY]

    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    safe_write_json(HISTORY_PATH, history)

    print(f"‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ –æ–±–Ω–æ–≤–ª—ë–Ω ({today}).")


if __name__ == "__main__":
    main()
