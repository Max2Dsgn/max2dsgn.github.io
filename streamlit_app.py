import openai
import feedparser
from datetime import datetime
import streamlit as st

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="AI FutureCast", page_icon="üîÆ", layout="centered")

st.title("üîÆ AI FutureCast: –ø—Ä–æ–≥–Ω–æ–∑—ã –¥–ª—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞")
st.write("–ö–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî –Ω–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∏ –¥–∏–∑–∞–π–Ω–µ—Ä—Å–∫–∏—Ö —Ç—Ä–µ–Ω–¥–æ–≤, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ò–ò –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –º–∏—Ä–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.")

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
# RSS-–∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏
RSS_FEEDS = {
    "TechCrunch": "https://techcrunch.com/feed/",
    "The Verge": "https://www.theverge.com/rss/index.xml",
    "Wired": "https://www.wired.com/feed/rss",
    "ProductHunt": "https://www.producthunt.com/feed",
    "VentureBeat": "https://venturebeat.com/feed/",
    "–†–ë–ö –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏": "https://rssexport.rbc.ru/rbcnews/technology/20/full.rss",
    "–•–∞–±—Ä": "https://habr.com/ru/rss/all/all/",
}

# –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
KEYWORDS = [
    "—Ç–µ—Ö–Ω–æ–ª–æ–≥", "—Å—Ç–∞—Ä—Ç–∞–ø", "–¥–∏–∑–∞–π–Ω", "UX", "UI", "–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å",
    "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", "AI", "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "–∏–Ω–Ω–æ–≤–∞—Ü",
    "–ø—Ä–æ–¥—É–∫—Ç", "–≥–∞–¥–∂–µ—Ç", "—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "—Ä–æ–±–æ—Ç",
    "—Ç—Ä–µ–Ω–¥", "–Ω–æ–≤–∏–Ω–∫–∞", "IT", "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"
]

# --- –§—É–Ω–∫—Ü–∏–∏ ---

def get_filtered_headlines():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ RSS –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º."""
    headlines = []
    for source, url in RSS_FEEDS.items():
        try:
            feed = feedparser.parse(url)
            for entry in feed.entries:
                title = entry.title
                if any(keyword.lower() in title.lower() for keyword in KEYWORDS):
                    headlines.append(f"{title} ({source})")
        except Exception as e:
            st.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {source}: {e}")
    return headlines[:20]  # –æ–≥—Ä–∞–Ω–∏—á–∏–º –¥–æ 20 –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤

def build_prompt(headlines):
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –º–æ–¥–µ–ª–∏."""
    now = datetime.utcnow().strftime("%Y-%m-%d %H:%M UTC")
    joined = "\n".join([f"- {h}" for h in headlines])
    if len(joined) > 2000:
        joined = joined[:2000] + "\n... (truncated)"
    return f"""
–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –≤ –æ–±–ª–∞—Å—Ç–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞.
–ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∏–≤–µ–¥—ë–Ω–Ω—ã–µ –Ω–∏–∂–µ —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ (–º–∏—Ä–æ–≤—ã–µ –∏ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏)
–∏ —Å–æ–∑–¥–∞–π –ø—Ä–æ–≥–Ω–æ–∑—ã –≤ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –∏ –¥–∏–∑–∞–π–Ω–µ—Ä—Å–∫–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ.

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
1Ô∏è‚É£ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é ‚Äî –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∏ –¥–∏–∑–∞–π–Ω–µ—Ä—Å–∫–∏–µ —Ç—Ä–µ–Ω–¥—ã, –Ω–æ–≤—ã–µ –∏–¥–µ–∏ –∏ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏.
2Ô∏è‚É£ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–µ—Å—è—Ü ‚Äî –∫—É–¥–∞ –¥–≤–∏–∂—É—Ç—Å—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –ø—Ä–æ–¥—É–∫—Ç—ã –∏ –¥–∏–∑–∞–π–Ω-–∏–Ω–¥—É—Å—Ç—Ä–∏—è.
3Ô∏è‚É£ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –≥–æ–¥ ‚Äî –∫—Ä—É–ø–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, —Ç—Ä–µ–Ω–¥—ã –∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã—Ö –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏.

–î–∞–π —Ç–∞–∫–∂–µ –∫–æ—Ä–æ—Ç–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤ –∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤, —á—Ç–æ–±—ã –æ–Ω–∏ –º–æ–≥–ª–∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫ —ç—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è–º.

–ù–æ–≤–æ—Å—Ç–∏ (–∞–∫—Ç—É–∞–ª—å–Ω–æ –Ω–∞ {now}):
{joined}

–û—Ç–≤–µ—Ç –¥–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
"""

def call_openai(prompt):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ OpenAI API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç."""
    openai.api_key = st.secrets["OPENAI_API_KEY"]
    try:
        response = openai.completions.create(
            model="gpt-4o-mini",
            prompt=prompt,
            max_tokens=800,
            temperature=0.7,
        )
        return response.choices[0].text.strip()
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ OpenAI API: {e}"

# --- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---

st.divider()
st.write("üîç –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...")

headlines = get_filtered_headlines()

if not headlines:
    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
else:
    st.success(f"–ü–æ–ª—É—á–µ–Ω–æ {len(headlines)} –Ω–æ–≤–æ—Å—Ç–µ–π.")
    with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏, –ø–æ –∫–æ—Ç–æ—Ä—ã–º —Å—Ç—Ä–æ–∏—Ç—Å—è –ø—Ä–æ–≥–Ω–æ–∑"):
        for h in headlines:
            st.write("‚Ä¢", h)

    if st.button("‚ú® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑"):
        with st.spinner("–ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–µ–Ω–¥—ã –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑..."):
            prompt = build_prompt(headlines)
            forecast = call_openai(prompt)
            st.divider()
            st.subheader("üìä –ü—Ä–æ–≥–Ω–æ–∑")
            st.write(forecast)
            st.caption(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ {datetime.now().strftime('%Y-%m-%d %H:%M')}")

st.divider()
st.caption("AI FutureCast ¬© 2025 ‚Äî –ø—Ä–æ–≥–Ω–æ–∑—ã –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã—Ö –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–æ–≤.")
