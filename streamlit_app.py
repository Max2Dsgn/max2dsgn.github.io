import streamlit as st
import feedparser
import openai
import time
import json
from datetime import datetime

st.set_page_config(page_title="–ü—Ä–æ–≥–Ω–æ–∑ –ë—É–¥—É—â–µ–≥–æ üîÆ", page_icon="üîÆ", layout="centered")
st.title("–ü—Ä–æ–≥–Ω–æ–∑ –ë—É–¥—É—â–µ–≥–æ üîÆ")
st.write("–ö–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ –Ω–µ–¥–µ–ª—é, –º–µ—Å—è—Ü –∏ –≥–æ–¥ ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ò–ò –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–≤–µ–∂–∏—Ö –º–∏—Ä–æ–≤—ã—Ö –∏ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π. \
–ü—Ä–æ—Ç–æ—Ç–∏–ø: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é. –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω-–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ cron/GitHub Actions.")

# --- Settings ---
RSS_FEEDS = {
    "BBC World": "https://feeds.bbci.co.uk/news/world/rss.xml",
    "Reuters World": "http://feeds.reuters.com/Reuters/worldNews",
    "TASS (ru)": "https://tass.com/rss/v2.xml",
    "RBC (ru)": "https://www.rbc.ru/rbcnews.rss",
    "RIA Novosti (ru)": "https://ria.ru/export/rss2/index.xml"
}
MAX_HEADLINES = 12
CONTEXT_TRIM_CHARS = 3000

# --- OpenAI key ---
if "OPENAI_API_KEY" not in st.secrets:
    st.warning("–ù–µ –Ω–∞–π–¥–µ–Ω OPENAI_API_KEY –≤ —Å–µ–∫—Ä–µ—Ç–∞—Ö Streamlit. –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ Secrets.")
openai.api_key = st.secrets.get("OPENAI_API_KEY", "")

# --- Utilities ---
def fetch_headlines(feeds, max_total=12):
    headlines = []
    for name, url in feeds.items():
        try:
            d = feedparser.parse(url)
            for entry in d.entries[:3]:
                title = entry.get("title", "")
                summary = entry.get("summary", "")
                headlines.append(f"{name}: {title} ‚Äî {summary}")
                if len(headlines) >= max_total:
                    return headlines
        except Exception as e:
            # ignore feed errors
            continue
    return headlines

def build_prompt(headlines):
    now = datetime.utcnow().strftime("%Y-%m-%d %H:%M UTC")
    joined = "\n".join([f"- {h}" for h in headlines])
    if len(joined) > CONTEXT_TRIM_CHARS:
        joined = joined[:CONTEXT_TRIM_CHARS] + "\n... (truncated)"
    prompt = f"""
–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫. –ù–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–≤–µ–¥—ë–Ω–Ω—ã—Ö –Ω–∏–∂–µ —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π (—Å–º–µ—à–∞–Ω–Ω—ã–µ –º–∏—Ä–æ–≤—ã–µ –∏ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏)
—Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –ª–∞–∫–æ–Ω–∏—á–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –≤ –≤–µ–∂–ª–∏–≤–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ –Ω–∞ —Ç—Ä—ë—Ö –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞—Ö:
1) –ù–∞ –Ω–µ–¥–µ–ª—é ‚Äî –∫–ª—é—á–µ–≤—ã–µ –æ–∂–∏–¥–∞–µ–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ —á—Ç–æ —Å—Ç–æ–∏—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å.
2) –ù–∞ –º–µ—Å—è—Ü ‚Äî –≤–µ—Ä–æ—è—Ç–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã –∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ä–∏—Å–∫–∏.
3) –ù–∞ –≥–æ–¥ ‚Äî –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–≤–∏—Ç–∏—è –∏ –∫—Ä—É–ø–Ω—ã–µ —Å–¥–≤–∏–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø—Ä–æ–∏–∑–æ–π—Ç–∏.

–û–≥—Ä–∞–Ω–∏—á—å—Å—è –ø—Ä–∏–º–µ—Ä–Ω–æ 3‚Äì5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –Ω–∞ –∫–∞–∂–¥—ã–π –≥–æ—Ä–∏–∑–æ–Ω—Ç. –í—ã–¥–µ–ª–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å (–Ω–∏–∑–∫–∞—è/—Å—Ä–µ–¥–Ω—è—è/–≤—ã—Å–æ–∫–∞—è) —É –∫–∞–∂–¥–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –≤ —Å–∫–æ–±–∫–∞—Ö.
–î–æ–±–∞–≤—å –≤ –∫–æ–Ω—Ü–µ 1‚Äì2 –∫—Ä–∞—Ç–∫–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤–æ–≥–æ –¥–∏–∑–∞–π–Ω–µ—Ä–∞.

–ö–æ–Ω—Ç–µ–∫—Å—Ç (–Ω–æ–≤–æ—Å—Ç–∏ —Å–æ–±—Ä–∞–Ω—ã –ø–æ %s):
%s

–û—Ç–≤–µ—Ç –¥–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
""" % (now, joined)
    return prompt

def call_openai(prompt, model="gpt-4o-mini", temperature=0.7, max_tokens=600):
    if not openai.api_key:
        return "–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç API-–∫–ª—é—á OpenAI. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ OPENAI_API_KEY –≤ —Å–µ–∫—Ä–µ—Ç–∞—Ö."
    try:
        response = openai.completions.create(
            model=model,
            prompt=prompt,
            max_tokens=max_tokens,
            temperature=temperature
        )
        return response.choices[0].text.strip()
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ OpenAI API: {e}"

# --- UI ---
st.sidebar.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–ø—Ä–æ—Ç–æ—Ç–∏–ø)")
st.sidebar.write("–ú–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å —á–∏—Å–ª–æ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ –º–æ–¥–µ–ª—å (–µ—Å–ª–∏ —É –≤–∞—Å –¥–æ—Å—Ç—É–ø)")
max_items = st.sidebar.slider("–ú–∞–∫—Å. –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏–∑ RSS", 5, 30, MAX_HEADLINES)
model = st.sidebar.text_input("–ú–æ–¥–µ–ª—å (OpenAI)", value="gpt-4o-mini")
temp = st.sidebar.slider("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ò–ò", 0.0, 1.0, 0.7)

st.markdown("---")
st.subheader("–ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–æ–≤–æ—Å—Ç–µ–π")
st.write("–°–æ–±–∏—Ä–∞—é—Ç—Å—è —Ç–æ–ø-–∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö RSS-–ª–µ–Ω—Ç (–º–∏—Ä–æ–≤—ã–µ + —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ).")

col1, col2 = st.columns([3,1])
with col1:
    if st.button("–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ (–ò–ò)"):
        with st.spinner("–°–æ–±–∏—Ä–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏..."):
            headlines = fetch_headlines(RSS_FEEDS, max_total=max_items)
            if not headlines:
                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ RSS. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ç–∏ –∏–ª–∏ RSS-–ª–µ–Ω—Ç—ã.")
            else:
                st.info(f"–°–æ–±—Ä–∞–Ω–æ {len(headlines)} –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤. –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –∏ –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ OpenAI...")
                prompt = build_prompt(headlines)
                forecast = call_openai(prompt, model=model, temperature=float(temp))
                # save to local file (append)
                record = {
                    "time": datetime.utcnow().isoformat(),
                    "model": model,
                    "temperature": temp,
                    "headlines": headlines,
                    "forecast": forecast
                }
                try:
                    # append to history file
                    history_path = "data/forecasts_history.json"
                    try:
                        with open(history_path, "r", encoding="utf-8") as f:
                            hist = json.load(f)
                    except:
                        hist = []
                    hist.insert(0, record)
                    with open(history_path, "w", encoding='utf-8') as f:
                        json.dump(hist[:200], f, ensure_ascii=False, indent=2)
                except Exception as e:
                    st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é: {e}")
                st.subheader("üîÆ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑")
                st.markdown(f"```\n{forecast}\n```")
    else:
        st.write("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É **–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ (–ò–ò)** —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–π –ø—Ä–æ–≥–Ω–æ–∑.")

with col2:
    st.write("–ò—Å—Ç–æ—Ä–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑—ã)")
    try:
        with open("data/forecasts_history.json", "r", encoding='utf-8') as f:
            hist = json.load(f)
        for r in hist[:5]:
            t = r.get("time","?")
            st.write(f"- {t} ‚Äî {r.get('model','?')}")
    except Exception:
        st.write("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")

st.markdown("---")
st.subheader("–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç (–∫–æ—Ä–æ—Ç–∫–æ)")
st.write("""
1. –°–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ RSS (–Ω–µ—Å–∫–æ–ª—å–∫–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤).  
2. –ö–æ–Ω—Å—Ç—Ä—É–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ OpenAI.  
3. –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫—Ä–∞—Ç–∫–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏.  
–≠—Ç–æ –ø—Ä–æ—Ç–æ—Ç–∏–ø ‚Äî –Ω–µ –¥–∞—ë—Ç –≥–∞—Ä–∞–Ω—Ç–∏–π –∏ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
""")

st.caption("–ü—Ä–æ—Ç–æ—Ç–∏–ø —Å–æ–∑–¥–∞–Ω –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏–¥–µ–∏. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –∫–∞–∫ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ —Ä–µ—à–µ–Ω–∏–π.")
