import openai
import feedparser
import json
import os
from datetime import datetime, date
import streamlit as st

# ==============================
# ‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# ==============================

st.set_page_config(page_title="AI FutureCast", page_icon="üîÆ", layout="centered")

st.title("üîÆ AI FutureCast: –ø—Ä–æ–≥–Ω–æ–∑—ã –¥–ª—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞")
st.write("–ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–≤–µ–∂–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –±—É–¥—É—â–∏—Ö —Ç—Ä–µ–Ω–¥–æ–≤ ‚Äî –Ω–∞ –Ω–µ–¥–µ–ª—é, –º–µ—Å—è—Ü –∏ –≥–æ–¥.")

# RSS-–∏—Å—Ç–æ—á–Ω–∏–∫–∏
RSS_FEEDS = {
    "TechCrunch": "https://techcrunch.com/feed/",
    "The Verge": "https://www.theverge.com/rss/index.xml",
    "Wired": "https://www.wired.com/feed/rss",
    "ProductHunt": "https://www.producthunt.com/feed",
    "VentureBeat": "https://venturebeat.com/feed/",
    "–†–ë–ö –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏": "https://rssexport.rbc.ru/rbcnews/technology/20/full.rss",
    "–•–∞–±—Ä": "https://habr.com/ru/rss/all/all/",
}

# –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ ‚Äî —Ä—É—Å—Å–∫–∏–µ + –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ
KEYWORDS = [
    # –†—É—Å—Å–∫–∏–µ
    "—Ç–µ—Ö–Ω–æ–ª–æ–≥", "—Å—Ç–∞—Ä—Ç–∞–ø", "–¥–∏–∑–∞–π–Ω", "ux", "ui", "–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å",
    "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "–∏–Ω–Ω–æ–≤–∞—Ü",
    "–ø—Ä–æ–¥—É–∫—Ç", "–≥–∞–¥–∂–µ—Ç", "—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "—Ä–æ–±–æ—Ç",
    "—Ç—Ä–µ–Ω–¥", "–Ω–æ–≤–∏–Ω–∫–∞", "it", "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "—Ü–∏—Ñ—Ä–æ–≤", "–º–µ—Ç–∞–≤—Å–µ–ª–µ–Ω–Ω",
    # –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ
    "technology", "tech", "startup", "innovation", "design", "ux", "ui",
    "interface", "product", "ai", "machine learning", "artificial intelligence",
    "app", "mobile", "software", "hardware", "gadget", "developer", "digital",
    "trend", "cloud", "data", "robot", "automation", "saas", "launch", "productivity",
    "future", "ui/ux", "user experience", "human-centered", "prototype", "creativity"
]

# –§–∞–π–ª –∏—Å—Ç–æ—Ä–∏–∏
HISTORY_FILE = "data/forecasts_history.json"
os.makedirs("data", exist_ok=True)

# ==============================
# üì∞ –†–∞–±–æ—Ç–∞ —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏
# ==============================

def get_filtered_headlines():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º."""
    headlines = []
    for source, url in RSS_FEEDS.items():
        try:
            feed = feedparser.parse(url)
            for entry in feed.entries:
                title = entry.title
                if any(keyword.lower() in title.lower() for keyword in KEYWORDS):
                    headlines.append(f"{title} ({source})")
        except Exception as e:
            st.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {source}: {e}")
    return headlines[:20]


# ==============================
# üß† –ü—Ä–æ–≥–Ω–æ–∑ –æ—Ç OpenAI
# ==============================

def build_prompt(headlines):
    now = datetime.utcnow().strftime("%Y-%m-%d %H:%M UTC")
    joined = "\n".join([f"- {h}" for h in headlines])
    if len(joined) > 2000:
        joined = joined[:2000] + "\n... (truncated)"
    return f"""
–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –≤ –æ–±–ª–∞—Å—Ç–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞.
–ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∏–≤–µ–¥—ë–Ω–Ω—ã–µ –Ω–∏–∂–µ —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ (–º–∏—Ä–æ–≤—ã–µ –∏ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏)
–∏ —Å–æ–∑–¥–∞–π –ø—Ä–æ–≥–Ω–æ–∑—ã –≤ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –∏ –¥–∏–∑–∞–π–Ω–µ—Ä—Å–∫–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ.

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
1Ô∏è‚É£ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é ‚Äî –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∏ –¥–∏–∑–∞–π–Ω–µ—Ä—Å–∫–∏–µ —Ç—Ä–µ–Ω–¥—ã, –Ω–æ–≤—ã–µ –∏–¥–µ–∏ –∏ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏.
2Ô∏è‚É£ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–µ—Å—è—Ü ‚Äî –∫—É–¥–∞ –¥–≤–∏–∂—É—Ç—Å—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –ø—Ä–æ–¥—É–∫—Ç—ã –∏ –¥–∏–∑–∞–π–Ω-–∏–Ω–¥—É—Å—Ç—Ä–∏—è.
3Ô∏è‚É£ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –≥–æ–¥ ‚Äî –∫—Ä—É–ø–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, —Ç—Ä–µ–Ω–¥—ã –∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã—Ö –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏.

–î–æ–±–∞–≤—å –≤ –∫–æ–Ω—Ü–µ –∫—Ä–∞—Ç–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤ –∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤.

–ù–æ–≤–æ—Å—Ç–∏ (–∞–∫—Ç—É–∞–ª—å–Ω–æ –Ω–∞ {now}):
{joined}

–û—Ç–≤–µ—Ç –¥–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
"""

def call_openai(prompt):
    openai.api_key = st.secrets["OPENAI_API_KEY"]
    try:
        response = openai.completions.create(
            model="gpt-4o-mini",
            prompt=prompt,
            max_tokens=800,
            temperature=0.7,
        )
        return response.choices[0].text.strip()
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ OpenAI API: {e}"


# ==============================
# üíæ –†–∞–±–æ—Ç–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
# ==============================

def load_history():
    if os.path.exists(HISTORY_FILE):
        with open(HISTORY_FILE, "r") as f:
            return json.load(f)
    return []

def save_forecast(forecast_text):
    history = load_history()
    today = date.today().isoformat()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø–∏—Å–∞–Ω –ª–∏ —É–∂–µ –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    if any(entry["date"] == today for entry in history):
        return
    entry = {"date": today, "forecast": forecast_text}
    history.insert(0, entry)
    history = history[:7]  # —Ö—Ä–∞–Ω–∏–º –Ω–µ–¥–µ–ª—é
    with open(HISTORY_FILE, "w") as f:
        json.dump(history, f, ensure_ascii=False, indent=2)


# ==============================
# üé® –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
# ==============================

st.divider()
st.write("üîç –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...")

headlines = get_filtered_headlines()

if not headlines:
    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
else:
    st.success(f"–ü–æ–ª—É—á–µ–Ω–æ {len(headlines)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.")
    with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏, –ø–æ –∫–æ—Ç–æ—Ä—ã–º —Å—Ç—Ä–æ–∏—Ç—Å—è –ø—Ä–æ–≥–Ω–æ–∑"):
        for h in headlines:
            st.write("‚Ä¢", h)

    if st.button("‚ú® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑"):
        with st.spinner("–ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–µ–Ω–¥—ã..."):
            prompt = build_prompt(headlines)
            forecast = call_openai(prompt)
            st.divider()
            st.subheader("üìä –ü—Ä–æ–≥–Ω–æ–∑")
            st.write(forecast)
            st.caption(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ {datetime.now().strftime('%Y-%m-%d %H:%M')}")
            save_forecast(forecast)

# ==============================
# üìú –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
# ==============================

st.divider()
st.subheader("üïì –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)")
history = load_history()

if history:
    for entry in history[:3]:  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3
        with st.expander(f"üìÖ {entry['date']}"):
            st.write(entry["forecast"])
else:
    st.info("–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞ –ø—É—Å—Ç–∞. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø–µ—Ä–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑!")

st.divider()
st.caption("AI FutureCast ¬© 2025 ‚Äî –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã—Ö –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–æ–≤.")
